// ESP32-CAM Arduino Code
// Install ch340
// add library arduinoJson - Benoit Blanchon...
// Preference - Board Manager "https://dl.espressif.com/dl/package_esp32_index.json"

// -----------------------------------------------------------------------------
#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// -----------------------------------------------------------------------------
// 1) 핀맵 정의 (AI-Thinker ESP32-CAM)
// 1) Pin mapping for AI-Thinker ESP32-CAM
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// 2) Wi-Fi & 서버 설정
// 2) Wi-Fi & server configuration
const char* ssid      = "SSID";
const char* password  = "PW";
const char* serverUrl = "https://YourDomain/analyze_image";
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// 카메라 초기화 함수
// Camera initialization function
void initCamera() {
  camera_config_t config;
  config.pin_pwdn     = PWDN_GPIO_NUM;
  config.pin_reset    = RESET_GPIO_NUM;
  config.pin_xclk     = XCLK_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_d7       = Y9_GPIO_NUM;
  config.pin_d6       = Y8_GPIO_NUM;
  config.pin_d5       = Y7_GPIO_NUM;
  config.pin_d4       = Y6_GPIO_NUM;
  config.pin_d3       = Y5_GPIO_NUM;
  config.pin_d2       = Y4_GPIO_NUM;
  config.pin_d1       = Y3_GPIO_NUM;
  config.pin_d0       = Y2_GPIO_NUM;
  config.pin_vsync    = VSYNC_GPIO_NUM;
  config.pin_href     = HREF_GPIO_NUM;
  config.pin_pclk     = PCLK_GPIO_NUM;

  config.ledc_timer   = LEDC_TIMER_0;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size   = FRAMESIZE_XGA;
  config.jpeg_quality = 10;
  config.fb_count     = 1;

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("❌ Camera init failed: 0x%x\n", err);
    while (true) { delay(1000); }
  }

  // ✅ 색상 보정 설정 (기본값)
  // ✅ Set camera color correction (default)
  sensor_t *s = esp_camera_sensor_get();
  s->set_whitebal(s, 1);     // 자동 화이트밸런스 ON / Auto white balance ON
  s->set_awb_gain(s, 1);     // AWB gain ON
  s->set_brightness(s, 0);   // 밝기 기본값 / Default brightness
  s->set_saturation(s, 0);   // 채도 기본값 / Default saturation
  s->set_contrast(s, 0);     // 대비 기본값 / Default contrast
  s->set_gainceiling(s, (gainceiling_t)4); // 적절한 감도 / Reasonable gain ceiling
}
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// setup() 함수: 시스템 및 Wi-Fi 초기화
// setup() function: Initialize system and Wi-Fi
void setup() {
  Serial.begin(115200);
  Serial.println("\n📸 ESP32-CAM 시스템 시작");
  // Start ESP32-CAM system

  initCamera();
  Serial.println("✅ Camera initialized");

  WiFi.begin(ssid, password);
  Serial.print("📶 Connecting to Wi-Fi");
  int tries = 0;
  while (WiFi.status() != WL_CONNECTED && tries < 20) {
    delay(500);
    Serial.print(".");
    tries++;
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.print("\n✅ Wi-Fi connected, IP: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n❌ Wi-Fi connect failed, rebooting...");
    ESP.restart();
  }
}
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// 서버로 이미지 전송 함수
// Function to send image to server
void sendImageToServer() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("⚠️ Wi-Fi disconnected, retrying...");
    WiFi.reconnect();
    return;
  }

  camera_fb_t* fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("❌ Camera capture failed");
    return;
  }

  // HTTPS POST 요청 준비 및 전송 / Prepare and send HTTPS POST request
  WiFiClientSecure client;
  client.setInsecure();
  HTTPClient http;
  http.begin(client, serverUrl);
  http.addHeader("Content-Type", "application/octet-stream");
  int code = http.POST(fb->buf, fb->len);
  esp_camera_fb_return(fb);

  // 응답 코드 확인 / Check HTTP response code
  if (code <= 0) {
    Serial.printf("❌ HTTP POST failed, code=%d\n", code);
    http.end();
    return;
  }

  // 응답 파싱 및 감지 결과 출력 / Parse JSON response and print result
  String resp = http.getString();
  http.end();
  Serial.println("📥 Response: " + resp);

  DynamicJsonDocument doc(256);
  if (deserializeJson(doc, resp)) {
    Serial.println("⚠️ JSON parse error");
    return;
  }
  if (doc.containsKey("object")) {
    Serial.println("🎯 Detected: " + String(doc["object"].as<const char*>()));  
  }
}
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// loop() 함수: 주기적으로 이미지 전송
// loop() function: Periodically send images to server
void loop() {
  sendImageToServer();
  delay(3000);  // 3초마다 서버에 이미지 전송 / Send image every 3 seconds
}
